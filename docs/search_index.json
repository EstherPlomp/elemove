[["index.html", "Source code for Mapping Elephant Movements in Kruger Section 1 Introduction 1.1 About this project 1.2 Data access 1.3 Published work", " Source code for Mapping Elephant Movements in Kruger Pratik R. Gupte 2021-01-23 Section 1 Introduction 1.1 About this project The map shows elephant movement across the thermal landscape of Kruger National Park, South Africa. As a research assistant with Maria Thaker and Abi Vanak, I worked on cleaning up some previous work on elephant movement in response to temperature. Our work was published as Thaker M, Gupte PR, Prins HHT, et al (2019) Fine-Scale Tracking of Ambient Temperature and Movement Reveals Shuttling Behavior of Elephants to Water. Front Ecol Evol 7:. doi: 10.3389/fevo.2019.00004 Link to the paper: Thaker, Gupte, et al. (2019) Essentially, we showed that: Temperature loggers integrated into GPS collars are sufficiently good measures of environmental temperature. They aren’t they best solution, but they can be used to examine the effects of temperature on movement in a study that wasn’t necessarily designed with this goal. Kruger elephants move faster the warmer it gets, and slower in wooded regions. Elephants make cyclical visits to water sources, to which they arrive and leave at high speed, as our figure 6 showed: 1.1.1 Workflow Run the numbered .Rmd files and iPython notebook, in the order of numbering. 1.1.2 Reproducibility I tried making the entire process fully reproducible via a Docker image. I eventually decided against it because the image ended up at 2.5 GB, and I don’t believe in using up too much storage space. While most aspects of this project are reproducible, the further one gets from the actual mapping code, the less reproducible it gets. On the plus side: An Renv lockfile from which package versions used here can be restored. Reproducible code including downloading data from Movebank, and getting landscape data from OpenStreetMap and Google Earth Engine’s LANDSAT copies. What isn’t easy to replicate: Some layers of the data are not in a publicly citable repository or similar, and had to be acquired by asking personally. This includes the Kruger boundaries, and the locations of waterholes. The primary collection of the tracking data itself cannot be replicated. These elephants were collared in 2007 – 2009. Are they still around? Possibly. Could we entirely reproduce the study by finding, collaring, and following them again? Probably not. The primary data has to be taken with trust in the authors/researchers. The original dataset I received had issues! The geographic and UTM coordinates did not correspond for some individuals. This needed to be fixed. This is covered in the code for the original project: https://pratikunterwegs.github.io/elephantTempKruger/preliminary-data-preparation.html It it this repaired (but not otherwise cleaned) data that was uploaded to Movebank. 1.2 Data access This dataset tracks 14 adult female elephants over some 2 years in Kruger National Park, South Africa, and has been used for a number of projects, including seasonal movements, movement in response to fire, and in response to the thermal landscape. These projects were led by Rob Slotow*, Maria Thaker, and Abi Vanak. See the data access section for citation details. I worked on this data in 2017 – 2018 while a research assistant with Maria Thaker and Abi Vanak at CES, IISc, and ATREE, in Bangalore, India. I also uploaded the data to Movebank in 2018, and together with Candace Vinciguerra from Movebank, published the dataset under the project leaders’ names in the data repository. The data now forms part of the Movebank homepage animation, which is very cool to see. The tracking dataset collected for use in this work is available from Movebank: https://doi.org/10.5441/001/1.403h24q5 and can be cited as Slotow R, Thaker M, Vanak AT (2019) Data from: Fine-scale tracking of ambient temperature and movement reveals shuttling behavior of elephants to water. Movebank Data Repository. doi:10.5441/001/1.403h24q5 1.2.1 Landscape data I used LANDSAT 5’s surface reflectance product (band 6) to get the morning temperature over Kruger. The final single-raster data layers is the two year mean, with cloud cover removed. Landsat 5 has anomalies in its images which are fortunately not over Kruger, or at least don’t affect scenes over Kruger too much. By my calculations (in 2018), Landsat 5 passed over Kruger at around 9 am in the morning, every two weeks or so. I might be mistaken. The LANDSAT 5 surface reflectance thermal band (Band 6) is available from Google Earth Engine, and while USGS is unclear what the citation should read, this seems okay U.S. Geological Survey, 2015, Landsat surface reflectance data (ver. 1.1, March 27, 2019): U.S. Geological Survey Fact Sheet 2015-3034, 1 p., https://doi.org/10.3133/fs20153034. Other landscape data (waterholes and Kruger boundary) were provided by Maria Thaker and Abi Vanak, originally from SANParks. I accessed the rivers from OpenStreetMap, and I show only the non-seasonal rivers (as determined by OSM contributors). 1.3 Published work This dataset was used in Thaker M, Gupte PR, Prins HHT, et al (2019) Fine-Scale Tracking of Ambient Temperature and Movement Reveals Shuttling Behavior of Elephants to Water. Front Ecol Evol 7:. doi: 10.3389/fevo.2019.00004 Link to the paper: Thaker, Gupte, et al. (2019) Rob Slotow’s page at UKZN (and UKZN pages generally) appear to be down. "],["getting-elephant-data.html", "Section 2 Getting Elephant Data 2.1 Load libraries 2.2 Get elephant data from Movebank 2.3 Extract useful data from move object 2.4 Make elephant points into paths 2.5 Make sf data frame", " Section 2 Getting Elephant Data 2.1 Load libraries # load libs library(move) library(data.table) library(sf) 2.2 Get elephant data from Movebank message(&quot;acquiring elephant data&quot;) # check if local data exists and then get if not if (!file.exists(&quot;data/data_lines_elephants.gpkg&quot;)) { data &lt;- getDataRepositoryData(&quot;doi:10.5441/001/1.403h24q5&quot;) # save as rdata save(data, file = &quot;data/elephant_data.Rdata&quot;) message(&quot;acquired elephant data&quot;) } else { message(&quot;elephant data already available&quot;) } # extract data from the move object # which is the most labyrinthine object class ever 2.3 Extract useful data from move object # get coordinates, id, and time from the movestack # first split it because we know how lists work # it behaves like a list data_coords &lt;- split(data) # get data data_coords &lt;- Map(function(le, tag_id) { dt &lt;- data.table( cbind( coordinates(le), timestamps(le) ), tag_id ) setnames(dt, c(&quot;x&quot;, &quot;y&quot;, &quot;time&quot;, &quot;id&quot;)) }, data_coords, names(data_coords)) # remove data and clear garbage rm(data) gc() 2.4 Make elephant points into paths # make multilinestring of elephant paths geometry &lt;- st_sfc( lapply(data_coords, function(x) { st_linestring( as.matrix(x[, c(&quot;x&quot;, &quot;y&quot;)]) ) }), crs = 4326 ) # retransform geometry &lt;- st_transform(geometry, 32736) 2.5 Make sf data frame # get data data_sf &lt;- mapply( function(df) { df[1, c(&quot;id&quot;)] }, data_coords, SIMPLIFY = FALSE ) # add geometry data_sf &lt;- rbindlist(data_sf) data_sf[, geometry := geometry] # make sf data_sf &lt;- st_sf(data_sf, crs = 32736) # save st_write(data_sf, dsn = &quot;data/data_lines_elephants.gpkg&quot;, append = FALSE ) message(&quot;elephant data converted to paths and saved&quot;) "],["getting-background-data.html", "Section 3 Getting Background Data 3.1 Load libraries 3.2 Get Africa landmass from Natural Earth 3.3 Get Kruger boundary 3.4 Get rivers from OSM 3.5 Get Waterholes 3.6 Process LANDSAT data", " Section 3 Getting Background Data 3.1 Load libraries # load libs library(sf) library(rnaturalearth) library(osmdata) 3.2 Get Africa landmass from Natural Earth # only if local data does not exist if (!file.exists(&quot;data/africa.gpkg&quot;)) { # get natural earth data land &lt;- ne_countries( continent = &quot;africa&quot;, scale = &quot;small&quot;, returnclass = &quot;sf&quot; ) # save st_write(land, &quot;data/africa.gpkg&quot;, append = F) } 3.3 Get Kruger boundary The Kruger boundary was provided by SANParks. 3.4 Get rivers from OSM # if data does not already exist if (!file.exists(&quot;data/rivers_kruger.gpkg&quot;)) { # kruger bounding box kruger &lt;- st_read(&quot;data/kruger_clip/kruger_clip.shp&quot;) q &lt;- opq(bbox = st_bbox(kruger)) # make query query_waterways &lt;- add_osm_feature(q, key = &quot;waterway&quot;, value = c(&quot;river&quot;, &quot;stream&quot;) ) # run query rivers_kruger &lt;- osmdata_sf(query_waterways) # get only lines rivers_kruger &lt;- rivers_kruger$osm_lines # assign crs st_crs(rivers_kruger) &lt;- 4326 st_write( rivers_kruger, &quot;data/rivers_kruger.gpkg&quot; ) } 3.5 Get Waterholes Waterhole locations were provided by Abi Vanak and Maria Thaker, originally from SANParks. 3.6 Process LANDSAT data # do not evaluate because raster is large and not on GH # read data temp &lt;- raster(&quot;data/kruger_landsat5_temp.tif&quot;) # reproject temp_UTM &lt;- projectRaster( from = temp, res = 200, crs = st_crs(32736)$proj4string ) # save to file writeRaster(temp_UTM, filename = &quot;data/kruger_temperature_UTM.tif&quot;) "],["mapping-elephant-movement.html", "Section 4 Mapping Elephant Movement 4.1 Load libraries 4.2 Load data 4.3 Make Africa Inset 4.4 Make Kruger Inset 4.5 Make Main Figure", " Section 4 Mapping Elephant Movement 4.1 Load libraries # load libraries # for data library(sf) library(raster) library(rnaturalearth) library(data.table) library(glue) # for plotting library(ggplot2) library(ggspatial) library(ggtext) library(scico) 4.2 Load data 4.2.1 Prepare extent # prepare bounding box bbox &lt;- c( xmin = 330000, xmax = 393000, ymin = 7260000, ymax = 7298050 ) bbox_sf &lt;- st_bbox(bbox) bbox_sf &lt;- st_as_sfc(bbox_sf) st_crs(bbox_sf) &lt;- 32736 4.2.2 Load movement data # get data data &lt;- st_read(&quot;data/data_lines_elephants.gpkg&quot;) # get data 253 data_253 &lt;- data[data$id == &quot;AM253&quot;, ] # get other data data_rest &lt;- data[data$id %in% c(&quot;AM255&quot;, &quot;AM99&quot;, &quot;AM239&quot;, &quot;AM308&quot;), ] 4.2.3 Load boundary data # get kruger data kruger &lt;- st_read(&quot;data/kruger_clip/kruger_clip.shp&quot;) kruger &lt;- st_transform(kruger, 32736) # get inversion kruger_invert &lt;- st_difference( st_as_sfc(st_bbox(kruger)), kruger ) # get kruger point -- this is hardcoded but could also be a centroid kruger_point &lt;- st_point(c(31.5, -24)) kruger_point &lt;- st_sfc(kruger_point, crs = 4326) kruger_point &lt;- st_transform(kruger_point, 32736) # get africa for inset africa &lt;- st_read(&quot;data/africa.gpkg&quot;) africa &lt;- st_transform(africa, 32736) # get rivers rivers &lt;- st_read(&quot;data/rivers_kruger.gpkg&quot;) rivers &lt;- st_transform(rivers[is.na(rivers$seasonal), ], 32736) # waterholes waterholes &lt;- st_read(&quot;data/waterholes/waterpoints_zambatis_2011.shp&quot;) # get temperature if (!file.exists(&quot;data/kruger_temp_200m.tif&quot;)) { res_init &lt;- res(raster(&quot;data/kruger_temperature_UTM.tif&quot;)) res_final &lt;- res_init * 200 / res_init gdalUtils::gdalwarp( srcfile = &quot;data/kruger_temperature_UTM.tif&quot;, dstfile = &quot;data/kruger_temp_200m.tif&quot;, tr = c(res_final), r = &quot;average&quot;, te = c(bbox(raster(&quot;data/kruger_temperature_UTM.tif&quot;))) ) } # read in cropped raster temp &lt;- raster(&quot;data/kruger_temp_200m.tif&quot;) temp &lt;- raster::crop(temp, as(bbox_sf, &quot;Spatial&quot;)) temp &lt;- cbind(coordinates(temp), values(temp)) temp &lt;- data.table(temp) temp &lt;- temp[V3 &gt; 22, ] setnames(temp, &quot;V3&quot;, &quot;temp&quot;) # prepare a blue blue &lt;- scico::scico(3, palette = &quot;nuuk&quot;)[1] 4.3 Make Africa Inset fig_inset_a &lt;- ggplot() + geom_sf( data = africa, fill = &quot;tan&quot;, show.legend = F, col = NA ) + geom_sf( data = africa[africa$name == &quot;South Africa&quot;, ], fill = &quot;sienna&quot;, col = NA ) + geom_sf( data = kruger_point, size = 5, fill = NA, shape = 21, colour = &quot;grey20&quot;, stroke = 1 ) + scale_y_continuous( breaks = seq(-22, -34, -6) ) + theme_void(base_size = 8) + theme( panel.background = element_rect( fill = &quot;powderblue&quot;, colour = &quot;grey20&quot; ), plot.margin = unit(rep(2, 4), &quot;mm&quot;) ) + coord_sf( expand = T ) 4.4 Make Kruger Inset pal &lt;- scico(7, palette = &quot;turku&quot;) fig_inset_b &lt;- ggplot() + geom_sf( data = kruger, fill = &quot;tan&quot;, alpha = 0.8, col = NA, lwd = 0.3 ) + geom_sf( data = data, lwd = c(0.1), lty = 1, alpha = c(0.3), col = pal[2] ) + annotate( geom = &quot;rect&quot;, fill = NA, col = &quot;grey20&quot;, lwd = 0.3, xmin = bbox[&quot;xmin&quot;], xmax = bbox[&quot;xmax&quot;], ymin = bbox[&quot;ymin&quot;], ymax = bbox[&quot;ymax&quot;] ) + annotation_scale( bar_cols = c(&quot;grey50&quot;, &quot;grey70&quot;), height = unit(1, units = &quot;mm&quot;), text_family = &quot;IBM Plex Sans&quot; ) + theme_void() + coord_sf( crs = 32736, expand = FALSE, xlim = c(325000, NA) ) + theme( panel.background = element_rect( fill = &quot;grey75&quot; ), panel.border = element_rect( colour = &quot;grey20&quot;, fill = NA ), plot.margin = unit(rep(1, 4), &quot;mm&quot;) ) 4.5 Make Main Figure 4.5.1 Prepare textbox textbox &lt;- glue( &quot;**Kruger Elephants Shuttle to Water** African elephants move as they please, \\\\ ignoring park boundaries when it suits them. \\\\ Yet they need water to help them \\\\ through the thermal landscape (_blue: cool, orange: warm_; LANDSAT 5 \\\\ 2007 -- 2009 average). \\\\ In Kruger, elephants frequent water sources during the afternoon, the \\\\ hottest part of the day; arriving and leaving at high speed. \\\\ Here, elephant _AM253_ (red) and her herd seem anchored to specific \\\\ water sources, tracing loops to and from them, \\\\ while avoiding other herds (grey). \\\\ Elephants apparently also avoid the cooler conditions of _Acacia_ woodland, \\\\ seen here as the central blue patch. \\\\ Read more: _Thaker, Gupte, et al. (2019). Front. Ecol. Evol._&quot; ) # texttitle = &quot;Elephants Shuttle to Water&quot; textdata &lt;- data.table( x = bbox[&quot;xmin&quot;] + 5000, y = bbox[&quot;ymax&quot;] - 9000, label = textbox ) 4.5.2 Prepare movement plot # make plot fig_main &lt;- ggplot() + geom_sf( data = kruger, col = NA, fill = &quot;antiquewhite&quot;, ) + geom_tile( data = temp, aes(x, y, fill = temp), show.legend = F, alpha = 0.4 ) + geom_sf( data = rivers[is.na(rivers$seasonal), ], lwd = 1, col = blue, alpha = 0.35 ) + geom_sf( data = data_rest, lwd = c(0.15), lty = 1, alpha = c(0.2, 0.7, 0.3, 0.15), col = pal[c(2, 3, 2, 3)] ) + geom_sf( data = data_253, lwd = 0.2, alpha = 1, col = scico::scico(7, palette = &quot;bilbao&quot; )[6] ) + geom_sf( data = waterholes, col = blue, alpha = 0.45 ) + geom_sf( data = kruger, col = &quot;grey50&quot;, lwd = 0.3, fill = NA, lty = 2 ) + geom_sf( data = kruger_invert, fill = alpha(&quot;grey80&quot;, 0.35), col = NA ) + coord_sf( xlim = bbox[c(&quot;xmin&quot;, &quot;xmax&quot;)], ylim = bbox[c(&quot;ymin&quot;, &quot;ymax&quot;)], expand = FALSE ) 4.5.3 Add decoration fig_main &lt;- fig_main + annotation_north_arrow( style = north_arrow_minimal( text_family = &quot;IBM Plex Sans&quot;, text_size = 10, text_col = &quot;grey50&quot;, line_col = &quot;grey50&quot;, fill = &quot;grey50&quot; ), location = &quot;br&quot; ) + annotation_scale( bar_cols = c(&quot;grey50&quot;, &quot;grey90&quot;), height = unit(1, units = &quot;mm&quot;), text_family = &quot;IBM Plex Sans&quot; ) + theme_void() + theme( panel.background = element_rect( colour = &quot;grey&quot;, fill = alpha(&quot;grey&quot;, 0.5) ), plot.margin = unit(rep(5, 4), &quot;mm&quot;) ) 4.5.4 Add insets fig_main &lt;- fig_main + annotation_custom( grob = ggplotGrob( fig_inset_b ), xmin = bbox[c(&quot;xmin&quot;)] + 1000, xmax = bbox[c(&quot;xmin&quot;)] + 7500, ymax = bbox[&quot;ymin&quot;] + 13500, ymin = bbox[&quot;ymin&quot;] + 1000 ) + annotation_custom( grob = ggplotGrob( fig_inset_a ), xmin = bbox[c(&quot;xmin&quot;)] + 1000, xmax = bbox[c(&quot;xmin&quot;)] + 7500, ymax = bbox[&quot;ymin&quot;] + 21000, ymin = bbox[&quot;ymin&quot;] + 13600 ) 4.5.5 Add text box fig_main &lt;- fig_main + geom_textbox( data = textdata, aes( x, y, label = label ), family = &quot;IBM Plex Sans&quot;, size = 3, colour = &quot;grey20&quot;, fill = alpha(&quot;aliceblue&quot;, 0.5), box.color = alpha(&quot;grey&quot;, 0.5) ) textlabels &lt;- data.table( x = bbox[&quot;xmax&quot;] - c(8000, 18000), xend = bbox[&quot;xmax&quot;] - c(5000, 6000), y = bbox[&quot;ymin&quot;] + c(23500, 15000), yend = bbox[&quot;ymin&quot;] + c(12000, 9000), label = c(&quot;Warmer\\nMarula\\nSavanna&quot;, &quot;Cooler\\nAcacia\\nThickets&quot;) ) 4.5.6 Add some labels fig_main &lt;- fig_main + annotate( geom = &quot;text&quot;, x = bbox[c(&quot;xmin&quot;)] + c(20000, 30000), y = bbox[&quot;ymin&quot;] + c(12600, 15400), label = c( &quot;Private\\nNature\\nReserves&quot;, &quot;Kruger\\nNational\\nPark&quot; ), fontface = &quot;italic&quot;, family = &quot;IBM Plex Serif&quot;, alpha = c(0.55, 0.5), size = c(4, 5) ) + geom_text( data = textlabels, aes(x, y, label = label ), fontface = &quot;italic&quot;, family = &quot;IBM Plex Serif&quot;, alpha = c(0.5, 0.5), size = c(3, 3) ) 4.5.7 Make options # op1 = fig_main + # scale_fill_gradientn( # colours = scico(20, # palette = &quot;romaO&quot;, # direction = -1, # begin = 0., end = 1 # ) # ) # # op2 = fig_main + # scale_fill_distiller( # palette = &quot;RdYlBu&quot; # ) fig_main &lt;- fig_main + scale_fill_gradientn( colours = scico(20, palette = &quot;vikO&quot;, direction = 1, begin = 0., end = 1 ) ) 4.5.8 Save figure # wide 16:9 ggsave(fig_main, filename = &quot;figures/fig_map_wide.png&quot;, height = 9, width = 16, bg = &quot;grey&quot; ) # a low res version ggsave(fig_main, filename = &quot;figures/fig_map_wide_low_res.png&quot;, height = 9, width = 16, bg = &quot;grey&quot;, dpi = 72 ) "]]
