[["index.html", "Source code for Mapping Elephant Movements in Kruger Section 1 Introduction", " Source code for Mapping Elephant Movements in Kruger Pratik R. Gupte 2021-01-01 Section 1 Introduction "],["getting-elephant-data.html", "Section 2 Getting Elephant Data 2.1 Load libraries 2.2 Get elephant data from Movebank 2.3 Extract useful data from move object 2.4 Make elephant points into paths 2.5 Make sf data frame", " Section 2 Getting Elephant Data 2.1 Load libraries # load libs library(move) library(data.table) library(sf) 2.2 Get elephant data from Movebank # check if local data exists and then get if not if (!file.exists(&quot;data/data_lines_elephants.gpkg&quot;)) { data &lt;- getDataRepositoryData(&quot;doi:10.5441/001/1.403h24q5&quot;) # save as rdata save(data, file = &quot;data/elephant_data.Rdata&quot;) } # extract data from the move object # which is the most labyrinthine object class ever 2.3 Extract useful data from move object # get coordinates, id, and time from the movestack # first split it because we know how lists work # it behaves like a list data_coords &lt;- split(data) # get data data_coords &lt;- Map(function(le, tag_id) { dt &lt;- data.table( cbind( coordinates(le), timestamps(le) ), tag_id ) setnames(dt, c(&quot;x&quot;, &quot;y&quot;, &quot;time&quot;, &quot;id&quot;)) }, data_coords, names(data_coords)) # remove data and clear garbage rm(data) gc() 2.4 Make elephant points into paths # make multilinestring of elephant paths geometry &lt;- st_sfc( lapply(data_coords, function(x) { st_linestring( as.matrix(x[, c(&quot;x&quot;, &quot;y&quot;)]) ) }), crs = 4326 ) # retransform geometry &lt;- st_transform(geometry, 32736) 2.5 Make sf data frame # get data data_sf &lt;- mapply( function(df) { df[1, c(&quot;id&quot;)] }, data_coords, SIMPLIFY = FALSE ) # add geometry data_sf &lt;- rbindlist(data_sf) data_sf[, geometry := geometry] # make sf data_sf &lt;- st_sf(data_sf, crs = 32736) # save st_write(data_sf, dsn = &quot;data/data_lines_elephants.gpkg&quot;, append = FALSE ) "],["getting-background-data.html", "Section 3 Getting Background Data 3.1 Load libraries 3.2 Get Africa landmass from Natural Earth", " Section 3 Getting Background Data 3.1 Load libraries # load libs library(data.table) library(sf) library(rnaturalearth) 3.2 Get Africa landmass from Natural Earth # only if local data does not exist if (!file.exists(&quot;data/africa.gpkg&quot;)) { # get natural earth data land &lt;- ne_countries( continent = &quot;africa&quot;, scale = &quot;small&quot;, returnclass = &quot;sf&quot; ) # save st_write(land, &quot;data/africa.gpkg&quot;, append = F) } "],["mapping-elephant-movement.html", "Section 4 Mapping Elephant Movement 4.1 Load libraries 4.2 Load data 4.3 Make Africa Inset 4.4 Make Kruger Inset 4.5 Make Main Figure", " Section 4 Mapping Elephant Movement 4.1 Load libraries # load libraries # for data library(sf) library(raster) library(rnaturalearth) library(data.table) library(glue) # for plotting library(ggplot2) library(ggspatial) library(ggtext) library(scico) rot30 &lt;- function(geom, a) geom * matrix(c(cos(a), sin(a), -sin(a), cos(a)), 2, 2) 4.2 Load data 4.2.1 Prepare extent # prepare bounding box bbox &lt;- c( xmin = 330000, xmax = 393000, ymin = 7260000, ymax = 7298050 ) bbox_sf &lt;- st_bbox(bbox) bbox_sf &lt;- st_as_sfc(bbox_sf) st_crs(bbox_sf) &lt;- 32736 4.2.2 Load movement data # get data data &lt;- st_read(&quot;data/data_lines_elephants.gpkg&quot;) # get data 253 data_253 &lt;- data[data$id == &quot;AM253&quot;, ] # get other data data_rest &lt;- data[data$id %in% c(&quot;AM255&quot;, &quot;AM99&quot;, &quot;AM239&quot;, &quot;AM308&quot;), ] 4.2.3 Load boundary data # get kruger data kruger &lt;- st_read(&quot;data/kruger_clip/&quot;) kruger &lt;- st_transform(kruger, 32736) # get kruger point -- this is hardcoded but could also be a centroid kruger_point &lt;- st_point(c(31.5, -24)) kruger_point &lt;- st_sfc(kruger_point, crs = 4326) kruger_point &lt;- st_transform(kruger_point, 32736) # get africa for inset africa &lt;- st_read(&quot;data/africa.gpkg&quot;) africa &lt;- st_transform(africa, 32736) # get rivers rivers &lt;- st_read(&quot;data/river_crop/&quot;) rivers &lt;- st_transform(rivers[is.na(rivers$seasonal), ], 32736) # waterholes waterholes &lt;- st_read(&quot;data/waterholes/&quot;) # get temperature if (!file.exists(&quot;data/kruger_temp_200m.tif&quot;)) { res_init &lt;- res(raster(&quot;data/kruger_temperature_UTM.tif&quot;)) res_final &lt;- res_init * 200 / res_init gdalUtils::gdalwarp( srcfile = &quot;data/kruger_temperature_UTM.tif&quot;, dstfile = &quot;data/kruger_temp_200m.tif&quot;, tr = c(res_final), r = &quot;average&quot;, te = c(bbox(raster(&quot;data/kruger_temperature_UTM.tif&quot;))) ) } # read in cropped raster temp &lt;- raster(&quot;data/kruger_temp_200m.tif&quot;) temp &lt;- raster::crop(temp, as(bbox_sf, &quot;Spatial&quot;)) temp &lt;- cbind(coordinates(temp), values(temp)) temp &lt;- data.table(temp) temp &lt;- temp[V3 &gt; 22, ] setnames(temp, &quot;V3&quot;, &quot;temp&quot;) # prepare a blue blue &lt;- scico::scico(3, palette = &quot;nuuk&quot;)[1] 4.3 Make Africa Inset fig_inset_a &lt;- ggplot() + geom_sf( data = africa, fill = &quot;tan&quot;, show.legend = F, col = NA ) + geom_sf( data = africa[africa$name == &quot;South Africa&quot;, ], fill = &quot;sienna&quot;, col = NA )+ geom_sf( data = kruger_point, size = 5 ) + scale_y_continuous( breaks = seq(-22, -34, -6) ) + theme_void(base_size = 8) + theme( panel.background = element_rect( fill = &quot;powderblue&quot;, colour = &quot;grey20&quot; ), plot.margin = unit(rep(2, 4), &quot;mm&quot;) ) + coord_sf( expand = T ) 4.4 Make Kruger Inset pal &lt;- scico(7, palette = &quot;turku&quot;) fig_inset_b &lt;- ggplot() + geom_sf( data = kruger, fill = &quot;tan&quot;, alpha = 0.8, col = NA, lwd = 0.3 ) + geom_sf( data = data, lwd = c(0.1), lty = 1, alpha = c(0.3), col = pal[2] ) + annotate( geom = &quot;rect&quot;, fill = NA, col = &quot;grey20&quot;, lwd = 0.3, xmin = bbox[&quot;xmin&quot;], xmax = bbox[&quot;xmax&quot;], ymin = bbox[&quot;ymin&quot;], ymax = bbox[&quot;ymax&quot;] ) + annotation_scale( bar_cols = c(&quot;grey50&quot;, &quot;grey70&quot;), height = unit(1, units = &quot;mm&quot;), text_family = &quot;IBM Plex Sans&quot; ) + theme_void() + coord_sf( crs = 32736, expand = FALSE, xlim = c(325000, NA) ) + theme( panel.background = element_rect( fill = &quot;grey90&quot; ), panel.border = element_rect( colour = &quot;grey20&quot;, fill = NA ), plot.margin = unit(rep(1, 4), &quot;mm&quot;) ) 4.5 Make Main Figure 4.5.1 Prepare textbox textbox &lt;- glue( &quot;**Kruger Elephants Shuttle to Water** African elephants move as they please, \\\\ ignoring park boundaries when it suits them. \\\\ Yet they need water to help them \\\\ through the thermal landscape (_blue: cool, orange: warm_; LANDSAT 5 \\\\ 2007 -- 2009 average). \\\\ In Kruger, elephants frequent water sources during the afternoon, the \\\\ hottest part of the day; arriving and leaving at high speed. \\\\ Here, elephant _AM253_ (red) and her herd seem anchored to specific \\\\ water sources, tracing loops to and from them, \\\\ while avoiding other herds (grey). \\\\ Elephants apparently also avoid the cooler conditions of _Acacia_ woodland, \\\\ seen here as the central blue patch. \\\\ Read more: _Thaker, Gupte, et al. (2019). Front. Ecol. Evol._&quot; ) # texttitle = &quot;Elephants Shuttle to Water&quot; textdata &lt;- data.table( x = bbox[&quot;xmin&quot;] + 5000, y = bbox[&quot;ymax&quot;] - 9000, label = textbox ) 4.5.2 Prepare movement plot # make plot fig_main &lt;- ggplot() + geom_sf( data = kruger, col = NA, fill = &quot;antiquewhite&quot;, ) + geom_tile( data = temp, aes(x, y, fill = temp), show.legend = F, alpha = 0.45 ) + geom_sf( data = rivers[is.na(rivers$seasonal), ], lwd = 1, col = blue, alpha = 0.35 ) + geom_sf( data = data_rest, lwd = c(0.15), lty = 1, alpha = c(0.2, 0.7, 0.3, 0.15), col = pal[c(2, 3, 2, 3)] ) + geom_sf( data = data_253, lwd = 0.2, alpha = 1, col = scico::scico(7, palette = &quot;bilbao&quot; )[6] ) + geom_sf( data = waterholes, col = blue, alpha = 0.45 ) + geom_sf( data = kruger, col = &quot;grey50&quot;, lwd = 0.2, fill = NA, lty = 2 ) + scale_fill_gradientn( colours = scico(10, palette = &quot;vik&quot;, direction = 1, begin = 0., end = 1 ) ) 4.5.3 Add decoration fig_main &lt;- fig_main + annotation_north_arrow( style = north_arrow_minimal( text_family = &quot;IBM Plex Sans&quot;, text_size = 10, text_col = &quot;grey50&quot;, line_col = &quot;grey50&quot;, fill = &quot;grey50&quot; ), location = &quot;br&quot; ) + annotation_scale( bar_cols = c(&quot;grey50&quot;, &quot;grey90&quot;), height = unit(1, units = &quot;mm&quot;), text_family = &quot;IBM Plex Sans&quot; ) + theme_void() + theme( panel.background = element_rect( colour = &quot;grey&quot;, fill = &quot;grey90&quot; ), plot.margin = unit(rep(5, 4), &quot;mm&quot;) ) + coord_sf( xlim = bbox[c(&quot;xmin&quot;, &quot;xmax&quot;)], ylim = bbox[c(&quot;ymin&quot;, &quot;ymax&quot;)], expand = FALSE ) 4.5.4 Add insets fig_main &lt;- fig_main + annotation_custom( grob = ggplotGrob( fig_inset_b ), xmin = bbox[c(&quot;xmin&quot;)] + 1000, xmax = bbox[c(&quot;xmin&quot;)] + 7500, ymax = bbox[&quot;ymin&quot;] + 13500, ymin = bbox[&quot;ymin&quot;] + 1000 ) + annotation_custom( grob = ggplotGrob( fig_inset_a ), xmin = bbox[c(&quot;xmin&quot;)] + 1000, xmax = bbox[c(&quot;xmin&quot;)] + 7500, ymax = bbox[&quot;ymin&quot;] + 21000, ymin = bbox[&quot;ymin&quot;] + 13600 ) 4.5.5 Add text box fig_main &lt;- fig_main + geom_textbox( data = textdata, aes( x, y, label = label ), family = &quot;IBM Plex Sans&quot;, size = 3, colour = &quot;grey20&quot;, fill = alpha(&quot;aliceblue&quot;, 0.2), box.color = alpha(&quot;grey&quot;, 0.5) ) textlabels &lt;- data.table( x = bbox[&quot;xmax&quot;] - c(8000, 18000), xend = bbox[&quot;xmax&quot;] - c(5000, 6000), y = bbox[&quot;ymin&quot;] + c(23500, 15000), yend = bbox[&quot;ymin&quot;] + c(12000, 9000), label = c(&quot;Warmer\\nMarula\\nSavanna&quot;, &quot;Cooler\\nAcacia\\nThickets&quot;) ) 4.5.6 Add some labels fig_main &lt;- fig_main + annotate( geom = &quot;text&quot;, x = bbox[c(&quot;xmin&quot;)] + c(20000, 30000), y = bbox[&quot;ymin&quot;] + c(12600, 14400), label = c( &quot;Private\\nNature\\nReserves&quot;, &quot;Kruger\\nNational\\nPark&quot; ), fontface = &quot;italic&quot;, family = &quot;IBM Plex Serif&quot;, alpha = c(0.5, 0.5), size = c(4, 5) ) + geom_text( data = textlabels, aes(x, y, label = label ), fontface = &quot;italic&quot;, family = &quot;IBM Plex Serif&quot;, alpha = c(0.5, 0.5), size = c(3, 3) ) fig_main + theme( plot.background = element_rect( fill = &quot;grey80&quot;, colour = NA ) ) 4.5.7 Save figure # wide 16:9 ggsave(fig_main, filename = &quot;figures/fig_map_wide.png&quot;, height = 9, width = 16, bg = &quot;grey&quot; ) "]]
